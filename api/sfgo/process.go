// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     SysFlow.avsc
 */
package sfgo

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type Process struct {
	State SFObjectState `json:"state"`

	Oid *OID `json:"oid"`

	Poid *PoidUnion `json:"poid"`

	Ts int64 `json:"ts"`

	Exe string `json:"exe"`

	ExeArgs string `json:"exeArgs"`

	Uid int32 `json:"uid"`

	UserName string `json:"userName"`

	Gid int32 `json:"gid"`

	GroupName string `json:"groupName"`

	Tty bool `json:"tty"`

	ContainerId *ContainerIdUnion `json:"containerId"`

	Entry bool `json:"entry"`
}

const ProcessAvroCRC64Fingerprint = "\x12~\xc3Î¯qO|"

func NewProcess() *Process {
	return &Process{}
}

func DeserializeProcess(r io.Reader) (*Process, error) {
	t := NewProcess()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeProcessFromSchema(r io.Reader, schema string) (*Process, error) {
	t := NewProcess()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeProcess(r *Process, w io.Writer) error {
	var err error
	err = writeSFObjectState(r.State, w)
	if err != nil {
		return err
	}
	err = writeOID(r.Oid, w)
	if err != nil {
		return err
	}
	err = writePoidUnion(r.Poid, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Ts, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Exe, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ExeArgs, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Uid, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.UserName, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Gid, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.GroupName, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Tty, w)
	if err != nil {
		return err
	}
	err = writeContainerIdUnion(r.ContainerId, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Entry, w)
	if err != nil {
		return err
	}
	return err
}

func (r *Process) Serialize(w io.Writer) error {
	return writeProcess(r, w)
}

func (r *Process) Schema() string {
	return "{\"fields\":[{\"name\":\"state\",\"type\":{\"name\":\"SFObjectState\",\"namespace\":\"sysflow.type\",\"symbols\":[\"CREATED\",\"MODIFIED\",\"REUP\"],\"type\":\"enum\"}},{\"name\":\"oid\",\"type\":{\"fields\":[{\"name\":\"createTS\",\"type\":\"long\"},{\"name\":\"hpid\",\"type\":\"long\"}],\"name\":\"OID\",\"namespace\":\"sysflow.type\",\"type\":\"record\"}},{\"name\":\"poid\",\"type\":[\"null\",\"sysflow.type.OID\"]},{\"name\":\"ts\",\"type\":\"long\"},{\"name\":\"exe\",\"type\":\"string\"},{\"name\":\"exeArgs\",\"type\":\"string\"},{\"name\":\"uid\",\"type\":\"int\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"gid\",\"type\":\"int\"},{\"name\":\"groupName\",\"type\":\"string\"},{\"name\":\"tty\",\"type\":\"boolean\"},{\"name\":\"containerId\",\"type\":[\"null\",\"string\"]},{\"default\":false,\"name\":\"entry\",\"type\":\"boolean\"}],\"name\":\"sysflow.entity.Process\",\"type\":\"record\"}"
}

func (r *Process) SchemaName() string {
	return "sysflow.entity.Process"
}

func (_ *Process) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *Process) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *Process) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *Process) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *Process) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *Process) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *Process) SetString(v string)   { panic("Unsupported operation") }
func (_ *Process) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Process) Get(i int) types.Field {
	switch i {
	case 0:
		return &SFObjectStateWrapper{Target: &r.State}
	case 1:
		r.Oid = NewOID()

		return r.Oid
	case 2:
		r.Poid = NewPoidUnion()

		return r.Poid
	case 3:
		return &types.Long{Target: &r.Ts}
	case 4:
		return &types.String{Target: &r.Exe}
	case 5:
		return &types.String{Target: &r.ExeArgs}
	case 6:
		return &types.Int{Target: &r.Uid}
	case 7:
		return &types.String{Target: &r.UserName}
	case 8:
		return &types.Int{Target: &r.Gid}
	case 9:
		return &types.String{Target: &r.GroupName}
	case 10:
		return &types.Boolean{Target: &r.Tty}
	case 11:
		r.ContainerId = NewContainerIdUnion()

		return r.ContainerId
	case 12:
		return &types.Boolean{Target: &r.Entry}
	}
	panic("Unknown field index")
}

func (r *Process) SetDefault(i int) {
	switch i {
	case 12:
		r.Entry = false
		return
	}
	panic("Unknown field index")
}

func (r *Process) NullField(i int) {
	switch i {
	case 2:
		r.Poid = nil
		return
	case 11:
		r.ContainerId = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ *Process) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Process) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *Process) Finalize()                        {}

func (_ *Process) AvroCRC64Fingerprint() []byte {
	return []byte(ProcessAvroCRC64Fingerprint)
}
