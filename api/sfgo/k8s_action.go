// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     SysFlow.avsc
 */
package sfgo

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
)

type K8sAction int32

const (
	K8sActionK8S_COMPONENT_ADDED       K8sAction = 0
	K8sActionK8S_COMPONENT_MODIFIED    K8sAction = 1
	K8sActionK8S_COMPONENT_DELETED     K8sAction = 2
	K8sActionK8S_COMPONENT_ERROR       K8sAction = 3
	K8sActionK8S_COMPONENT_NONEXISTENT K8sAction = 4
	K8sActionK8S_COMPONENT_UNKNOWN     K8sAction = 5
)

func (e K8sAction) String() string {
	switch e {
	case K8sActionK8S_COMPONENT_ADDED:
		return "K8S_COMPONENT_ADDED"
	case K8sActionK8S_COMPONENT_MODIFIED:
		return "K8S_COMPONENT_MODIFIED"
	case K8sActionK8S_COMPONENT_DELETED:
		return "K8S_COMPONENT_DELETED"
	case K8sActionK8S_COMPONENT_ERROR:
		return "K8S_COMPONENT_ERROR"
	case K8sActionK8S_COMPONENT_NONEXISTENT:
		return "K8S_COMPONENT_NONEXISTENT"
	case K8sActionK8S_COMPONENT_UNKNOWN:
		return "K8S_COMPONENT_UNKNOWN"
	}
	return "unknown"
}

func writeK8sAction(r K8sAction, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewK8sActionValue(raw string) (r K8sAction, err error) {
	switch raw {
	case "K8S_COMPONENT_ADDED":
		return K8sActionK8S_COMPONENT_ADDED, nil
	case "K8S_COMPONENT_MODIFIED":
		return K8sActionK8S_COMPONENT_MODIFIED, nil
	case "K8S_COMPONENT_DELETED":
		return K8sActionK8S_COMPONENT_DELETED, nil
	case "K8S_COMPONENT_ERROR":
		return K8sActionK8S_COMPONENT_ERROR, nil
	case "K8S_COMPONENT_NONEXISTENT":
		return K8sActionK8S_COMPONENT_NONEXISTENT, nil
	case "K8S_COMPONENT_UNKNOWN":
		return K8sActionK8S_COMPONENT_UNKNOWN, nil
	}

	return -1, fmt.Errorf("invalid value for K8sAction: '%s'", raw)
}

func (b *K8sAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *K8sAction) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewK8sActionValue(stringVal)
	*b = val
	return err
}

type K8sActionWrapper struct {
	Target *K8sAction
}

func (b *K8sActionWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b *K8sActionWrapper) SetInt(v int32) {
	*(b.Target) = K8sAction(v)
}

func (b *K8sActionWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b *K8sActionWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b *K8sActionWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b *K8sActionWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b *K8sActionWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b *K8sActionWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b *K8sActionWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b *K8sActionWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b *K8sActionWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b *K8sActionWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b *K8sActionWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b *K8sActionWrapper) Finalize() {}
