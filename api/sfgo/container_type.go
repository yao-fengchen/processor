// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     SysFlow.avsc
 */
package sfgo

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
)

type ContainerType int32

const (
	ContainerTypeCT_DOCKER      ContainerType = 0
	ContainerTypeCT_LXC         ContainerType = 1
	ContainerTypeCT_LIBVIRT_LXC ContainerType = 2
	ContainerTypeCT_MESOS       ContainerType = 3
	ContainerTypeCT_RKT         ContainerType = 4
	ContainerTypeCT_CUSTOM      ContainerType = 5
	ContainerTypeCT_CRI         ContainerType = 6
	ContainerTypeCT_CONTAINERD  ContainerType = 7
	ContainerTypeCT_CRIO        ContainerType = 8
	ContainerTypeCT_BPM         ContainerType = 9
)

func (e ContainerType) String() string {
	switch e {
	case ContainerTypeCT_DOCKER:
		return "CT_DOCKER"
	case ContainerTypeCT_LXC:
		return "CT_LXC"
	case ContainerTypeCT_LIBVIRT_LXC:
		return "CT_LIBVIRT_LXC"
	case ContainerTypeCT_MESOS:
		return "CT_MESOS"
	case ContainerTypeCT_RKT:
		return "CT_RKT"
	case ContainerTypeCT_CUSTOM:
		return "CT_CUSTOM"
	case ContainerTypeCT_CRI:
		return "CT_CRI"
	case ContainerTypeCT_CONTAINERD:
		return "CT_CONTAINERD"
	case ContainerTypeCT_CRIO:
		return "CT_CRIO"
	case ContainerTypeCT_BPM:
		return "CT_BPM"
	}
	return "unknown"
}

func writeContainerType(r ContainerType, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewContainerTypeValue(raw string) (r ContainerType, err error) {
	switch raw {
	case "CT_DOCKER":
		return ContainerTypeCT_DOCKER, nil
	case "CT_LXC":
		return ContainerTypeCT_LXC, nil
	case "CT_LIBVIRT_LXC":
		return ContainerTypeCT_LIBVIRT_LXC, nil
	case "CT_MESOS":
		return ContainerTypeCT_MESOS, nil
	case "CT_RKT":
		return ContainerTypeCT_RKT, nil
	case "CT_CUSTOM":
		return ContainerTypeCT_CUSTOM, nil
	case "CT_CRI":
		return ContainerTypeCT_CRI, nil
	case "CT_CONTAINERD":
		return ContainerTypeCT_CONTAINERD, nil
	case "CT_CRIO":
		return ContainerTypeCT_CRIO, nil
	case "CT_BPM":
		return ContainerTypeCT_BPM, nil
	}

	return -1, fmt.Errorf("invalid value for ContainerType: '%s'", raw)
}

func (b *ContainerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *ContainerType) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewContainerTypeValue(stringVal)
	*b = val
	return err
}

type ContainerTypeWrapper struct {
	Target *ContainerType
}

func (b *ContainerTypeWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b *ContainerTypeWrapper) SetInt(v int32) {
	*(b.Target) = ContainerType(v)
}

func (b *ContainerTypeWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b *ContainerTypeWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b *ContainerTypeWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b *ContainerTypeWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b *ContainerTypeWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b *ContainerTypeWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b *ContainerTypeWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b *ContainerTypeWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b *ContainerTypeWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b *ContainerTypeWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b *ContainerTypeWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b *ContainerTypeWrapper) Finalize() {}
