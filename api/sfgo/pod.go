// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     SysFlow.avsc
 */
package sfgo

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type Pod struct {
	Ts int64 `json:"ts"`

	Id string `json:"id"`

	Name string `json:"name"`

	NodeName string `json:"nodeName"`

	HostIP []int64 `json:"hostIP"`

	InternalIP []int64 `json:"internalIP"`

	Namespace string `json:"namespace"`

	RestartCount int64 `json:"restartCount"`

	Labels map[string]string `json:"labels"`

	Selectors map[string]string `json:"selectors"`

	Services []*Service `json:"services"`
}

const PodAvroCRC64Fingerprint = "\xacķW\xf6NĜ"

func NewPod() *Pod {
	return &Pod{}
}

func DeserializePod(r io.Reader) (*Pod, error) {
	t := NewPod()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializePodFromSchema(r io.Reader, schema string) (*Pod, error) {
	t := NewPod()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writePod(r *Pod, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.Ts, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NodeName, w)
	if err != nil {
		return err
	}
	err = writeArrayLong(r.HostIP, w)
	if err != nil {
		return err
	}
	err = writeArrayLong(r.InternalIP, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Namespace, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.RestartCount, w)
	if err != nil {
		return err
	}
	err = writeMapString(r.Labels, w)
	if err != nil {
		return err
	}
	err = writeMapString(r.Selectors, w)
	if err != nil {
		return err
	}
	err = writeArrayService(r.Services, w)
	if err != nil {
		return err
	}
	return err
}

func (r *Pod) Serialize(w io.Writer) error {
	return writePod(r, w)
}

func (r *Pod) Schema() string {
	return "{\"fields\":[{\"name\":\"ts\",\"type\":\"long\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"nodeName\",\"type\":\"string\"},{\"name\":\"hostIP\",\"type\":{\"items\":\"long\",\"logicalType\":\"ipaddr\",\"type\":\"array\"}},{\"name\":\"internalIP\",\"type\":{\"items\":\"long\",\"logicalType\":\"ipaddr\",\"type\":\"array\"}},{\"name\":\"namespace\",\"type\":\"string\"},{\"name\":\"restartCount\",\"type\":\"long\"},{\"name\":\"labels\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"selectors\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"services\",\"type\":{\"items\":{\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"namespace\",\"type\":\"string\"},{\"name\":\"portList\",\"type\":{\"items\":{\"fields\":[{\"name\":\"port\",\"type\":\"int\"},{\"name\":\"targetPort\",\"type\":\"int\"},{\"name\":\"nodePort\",\"type\":\"int\"},{\"name\":\"proto\",\"type\":\"string\"}],\"name\":\"Port\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"clusterIP\",\"type\":{\"items\":\"long\",\"logicalType\":\"ipaddr\",\"type\":\"array\"}}],\"name\":\"Service\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"sysflow.entity.Pod\",\"type\":\"record\"}"
}

func (r *Pod) SchemaName() string {
	return "sysflow.entity.Pod"
}

func (_ *Pod) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *Pod) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *Pod) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *Pod) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *Pod) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *Pod) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *Pod) SetString(v string)   { panic("Unsupported operation") }
func (_ *Pod) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Pod) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.Long{Target: &r.Ts}
	case 1:
		return &types.String{Target: &r.Id}
	case 2:
		return &types.String{Target: &r.Name}
	case 3:
		return &types.String{Target: &r.NodeName}
	case 4:
		r.HostIP = make([]int64, 0)

		return &ArrayLongWrapper{Target: &r.HostIP}
	case 5:
		r.InternalIP = make([]int64, 0)

		return &ArrayLongWrapper{Target: &r.InternalIP}
	case 6:
		return &types.String{Target: &r.Namespace}
	case 7:
		return &types.Long{Target: &r.RestartCount}
	case 8:
		r.Labels = make(map[string]string)

		return &MapStringWrapper{Target: &r.Labels}
	case 9:
		r.Selectors = make(map[string]string)

		return &MapStringWrapper{Target: &r.Selectors}
	case 10:
		r.Services = make([]*Service, 0)

		return &ArrayServiceWrapper{Target: &r.Services}
	}
	panic("Unknown field index")
}

func (r *Pod) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Pod) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *Pod) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Pod) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *Pod) Finalize()                        {}

func (_ *Pod) AvroCRC64Fingerprint() []byte {
	return []byte(PodAvroCRC64Fingerprint)
}
