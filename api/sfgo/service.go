// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     SysFlow.avsc
 */
package sfgo

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type Service struct {
	Name string `json:"name"`

	Id string `json:"id"`

	Namespace string `json:"namespace"`

	PortList []*Port `json:"portList"`

	ClusterIP []int64 `json:"clusterIP"`
}

const ServiceAvroCRC64Fingerprint = "\xce\xea\xc7\xd7]h\xc7 "

func NewService() *Service {
	return &Service{}
}

func DeserializeService(r io.Reader) (*Service, error) {
	t := NewService()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeServiceFromSchema(r io.Reader, schema string) (*Service, error) {
	t := NewService()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeService(r *Service, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Namespace, w)
	if err != nil {
		return err
	}
	err = writeArrayPort(r.PortList, w)
	if err != nil {
		return err
	}
	err = writeArrayLong(r.ClusterIP, w)
	if err != nil {
		return err
	}
	return err
}

func (r *Service) Serialize(w io.Writer) error {
	return writeService(r, w)
}

func (r *Service) Schema() string {
	return "{\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"namespace\",\"type\":\"string\"},{\"name\":\"portList\",\"type\":{\"items\":{\"fields\":[{\"name\":\"port\",\"type\":\"int\"},{\"name\":\"targetPort\",\"type\":\"int\"},{\"name\":\"nodePort\",\"type\":\"int\"},{\"name\":\"proto\",\"type\":\"string\"}],\"name\":\"Port\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"clusterIP\",\"type\":{\"items\":\"long\",\"logicalType\":\"ipaddr\",\"type\":\"array\"}}],\"name\":\"sysflow.entity.Service\",\"type\":\"record\"}"
}

func (r *Service) SchemaName() string {
	return "sysflow.entity.Service"
}

func (_ *Service) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *Service) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *Service) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *Service) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *Service) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *Service) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *Service) SetString(v string)   { panic("Unsupported operation") }
func (_ *Service) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Service) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.Name}
	case 1:
		return &types.String{Target: &r.Id}
	case 2:
		return &types.String{Target: &r.Namespace}
	case 3:
		r.PortList = make([]*Port, 0)

		return &ArrayPortWrapper{Target: &r.PortList}
	case 4:
		r.ClusterIP = make([]int64, 0)

		return &ArrayLongWrapper{Target: &r.ClusterIP}
	}
	panic("Unknown field index")
}

func (r *Service) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Service) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *Service) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Service) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *Service) Finalize()                        {}

func (_ *Service) AvroCRC64Fingerprint() []byte {
	return []byte(ServiceAvroCRC64Fingerprint)
}
