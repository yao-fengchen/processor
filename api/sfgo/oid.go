// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     SysFlow.avsc
 */
package sfgo

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type OID struct {
	CreateTS int64 `json:"createTS"`

	Hpid int64 `json:"hpid"`
}

const OIDAvroCRC64Fingerprint = "\x98×…f\x87\xe7\u0602"

func NewOID() *OID {
	return &OID{}
}

func DeserializeOID(r io.Reader) (*OID, error) {
	t := NewOID()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeOIDFromSchema(r io.Reader, schema string) (*OID, error) {
	t := NewOID()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeOID(r *OID, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.CreateTS, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Hpid, w)
	if err != nil {
		return err
	}
	return err
}

func (r *OID) Serialize(w io.Writer) error {
	return writeOID(r, w)
}

func (r *OID) Schema() string {
	return "{\"fields\":[{\"name\":\"createTS\",\"type\":\"long\"},{\"name\":\"hpid\",\"type\":\"long\"}],\"name\":\"sysflow.type.OID\",\"type\":\"record\"}"
}

func (r *OID) SchemaName() string {
	return "sysflow.type.OID"
}

func (_ *OID) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *OID) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *OID) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *OID) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *OID) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *OID) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *OID) SetString(v string)   { panic("Unsupported operation") }
func (_ *OID) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *OID) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.Long{Target: &r.CreateTS}
	case 1:
		return &types.Long{Target: &r.Hpid}
	}
	panic("Unknown field index")
}

func (r *OID) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *OID) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *OID) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *OID) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *OID) Finalize()                        {}

func (_ *OID) AvroCRC64Fingerprint() []byte {
	return []byte(OIDAvroCRC64Fingerprint)
}
