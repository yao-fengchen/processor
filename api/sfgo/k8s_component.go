// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     SysFlow.avsc
 */
package sfgo

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
)

type K8sComponent int32

const (
	K8sComponentK8S_NODES                  K8sComponent = 0
	K8sComponentK8S_NAMESPACES             K8sComponent = 1
	K8sComponentK8S_PODS                   K8sComponent = 2
	K8sComponentK8S_REPLICATIONCONTROLLERS K8sComponent = 3
	K8sComponentK8S_SERVICES               K8sComponent = 4
	K8sComponentK8S_EVENTS                 K8sComponent = 5
	K8sComponentK8S_REPLICASETS            K8sComponent = 6
	K8sComponentK8S_DAEMONSETS             K8sComponent = 7
	K8sComponentK8S_DEPLOYMENTS            K8sComponent = 8
	K8sComponentK8S_UNKNOWN                K8sComponent = 9
)

func (e K8sComponent) String() string {
	switch e {
	case K8sComponentK8S_NODES:
		return "K8S_NODES"
	case K8sComponentK8S_NAMESPACES:
		return "K8S_NAMESPACES"
	case K8sComponentK8S_PODS:
		return "K8S_PODS"
	case K8sComponentK8S_REPLICATIONCONTROLLERS:
		return "K8S_REPLICATIONCONTROLLERS"
	case K8sComponentK8S_SERVICES:
		return "K8S_SERVICES"
	case K8sComponentK8S_EVENTS:
		return "K8S_EVENTS"
	case K8sComponentK8S_REPLICASETS:
		return "K8S_REPLICASETS"
	case K8sComponentK8S_DAEMONSETS:
		return "K8S_DAEMONSETS"
	case K8sComponentK8S_DEPLOYMENTS:
		return "K8S_DEPLOYMENTS"
	case K8sComponentK8S_UNKNOWN:
		return "K8S_UNKNOWN"
	}
	return "unknown"
}

func writeK8sComponent(r K8sComponent, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewK8sComponentValue(raw string) (r K8sComponent, err error) {
	switch raw {
	case "K8S_NODES":
		return K8sComponentK8S_NODES, nil
	case "K8S_NAMESPACES":
		return K8sComponentK8S_NAMESPACES, nil
	case "K8S_PODS":
		return K8sComponentK8S_PODS, nil
	case "K8S_REPLICATIONCONTROLLERS":
		return K8sComponentK8S_REPLICATIONCONTROLLERS, nil
	case "K8S_SERVICES":
		return K8sComponentK8S_SERVICES, nil
	case "K8S_EVENTS":
		return K8sComponentK8S_EVENTS, nil
	case "K8S_REPLICASETS":
		return K8sComponentK8S_REPLICASETS, nil
	case "K8S_DAEMONSETS":
		return K8sComponentK8S_DAEMONSETS, nil
	case "K8S_DEPLOYMENTS":
		return K8sComponentK8S_DEPLOYMENTS, nil
	case "K8S_UNKNOWN":
		return K8sComponentK8S_UNKNOWN, nil
	}

	return -1, fmt.Errorf("invalid value for K8sComponent: '%s'", raw)
}

func (b *K8sComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *K8sComponent) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewK8sComponentValue(stringVal)
	*b = val
	return err
}

type K8sComponentWrapper struct {
	Target *K8sComponent
}

func (b *K8sComponentWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b *K8sComponentWrapper) SetInt(v int32) {
	*(b.Target) = K8sComponent(v)
}

func (b *K8sComponentWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b *K8sComponentWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b *K8sComponentWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b *K8sComponentWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b *K8sComponentWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b *K8sComponentWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b *K8sComponentWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b *K8sComponentWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b *K8sComponentWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b *K8sComponentWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b *K8sComponentWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b *K8sComponentWrapper) Finalize() {}
